// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

abstract model Base {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@deny('all', auth() == null || auth().disabled)
}

model Account extends Base {
  username     String        @unique
  name         String?       @length(min: 3, max: 255) @map("full_name")
  disabled     Boolean       @default(true)

  tokens       OAuth2Token[]
  toptAccounts ToptAccount[]
  keys         AccountKey[]
  bookmarks    Bookmark[]
  tags         Tag[]
  categories   Category[]
  notes        Note[]

  @@auth()

  @@allow('read', auth() == this)
  @@allow('create', false)
  @@allow('update', auth() == this)
  @@allow('delete', false)

  @@map("accounts")
}

model ToptAccount extends Base {
  secret    String  @unique
  enabled   Boolean @default(true)

  account   Account @relation(fields: [accountId], references: [id])
  accountId String

  @@allow('read', false)
  @@allow('create', false)
  @@allow('update', false)
  @@allow('delete', false)

  @@map("account_topts")
}

model AccountKey extends Base {
  kid       String
  key       String  @unique
  algo      String?
  type      String?

  account   Account @relation(fields: [accountId], references: [id])
  accountId String

  @@allow('read', auth() == account)
  @@allow('create', false)
  @@allow('update', false)
  @@allow('delete', auth() == account)

  @@map("account_keys")
}

model Bookmark extends Base {
  title                    String
  url                      String
  addedOn                  DateTime                @default(now())

  author                   Account                 @relation(fields: [authorId], references: [id])
  authorId                 String

  BookmarkWebsiteSeoData   BookmarkWebsiteSeoData?
  bookmarkWebsiteSeoDataId String?

  tags                     Tag[]
  categories               Category[]

  @@allow('read', auth() == author)
  @@allow('create', auth() == author)
  @@allow('update', auth() == author)
  @@allow('delete', auth() == author)

  @@map("bookmarks")
}

model Note extends Base {
  title      String
  content    String
  lastEdit   DateTime   @default(now())

  owner      Account    @relation(fields: [ownerId], references: [id])
  ownerId    String

  tags       Tag[]
  categories Category[]

  @@allow('read', auth() == owner)
  @@allow('create', auth() == owner)
  @@allow('update', auth() == owner)
  @@allow('delete', auth() == owner)

  @@map("notes")
}

model BookmarkWebsiteSeoData extends Base {
  title       String?
  description String?
  image       String?
  url         String?
  bookmark    Bookmark @relation(fields: [bookmarkId], references: [id])
  bookmarkId  String   @unique

  @@allow('read', auth() == bookmark.author)
  @@allow('create', auth() == bookmark.author)
  @@allow('update', auth() == bookmark.author)
  @@allow('delete', auth() == bookmark.author)

  @@map("bookmark_website_seo_data")
}

model Category extends Base {
  name      String     @unique
  bookmarks Bookmark[]
  notes     Note[]
  account   Account    @relation(fields: [accountId], references: [id])
  accountId String

  @@allow('read', auth() == account)
  @@allow('create', auth() == account)
  @@allow('update', auth() == account)
  @@allow('delete', auth() == account)

  @@map("categories")
}

model Tag extends Base {
  name      String     @unique
  bookmarks Bookmark[]
  notes     Note[]
  account   Account    @relation(fields: [accountId], references: [id])
  accountId String

  @@allow('read', auth() == account)
  @@allow('create', auth() == account)
  @@allow('update', auth() == account)
  @@allow('delete', auth() == account)

  @@map("tags")
}

model OAuth2Client extends Base {
  secret               String?
  redirectUris         String[]
  grants               String[]
  scopes               String[]
  name                 String
  accessTokenLifetime  Int
  refreshTokenLifetime Int
  description          String?
  disabled             Boolean       @default(false)
  tokens               OAuth2Token[]

  @@allow('read', false)
  @@allow('create', false)
  @@allow('update', false)
  @@allow('delete', false)

  @@map("oauth2_clients")
}

model OAuth2Token extends Base {
  accessToken           String       @unique
  accessTokenExpiresAt  Int
  refreshToken          String?      @unique
  refreshTokenExpiresAt Int?
  scope                 String[]
  client                OAuth2Client @relation(fields: [clientId], references: [id])
  clientId              String
  account               Account      @relation(fields: [accountId], references: [id])
  accountId             String

  @@allow('read', false)
  @@allow('create', false)
  @@allow('update', false)
  @@allow('delete', false)

  @@map("oauth2_tokens")
}

model OAuth2Key extends Base {
  publicData  Json?
  privateData Json?
  enabled     Boolean @default(true)

  @@allow('read', false)
  @@allow('create', false)
  @@allow('update', false)
  @@allow('delete', false)

  @@map("oauth2_keys")
}

plugin hooks {
  provider = '@zenstackhq/swr'
  output = "lib/imarkedit-client/src/lib/gen/hooks"
}
